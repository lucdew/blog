diff --git a/source/_posts/2006-12-18-gwt-client-with-rails-backend-integration-tip-2.markdown b/source/_posts/2006-12-18-gwt-client-with-rails-backend-integration-tip-2.markdown
index 3cced04..c775608 100644
--- a/source/_posts/2006-12-18-gwt-client-with-rails-backend-integration-tip-2.markdown
+++ b/source/_posts/2006-12-18-gwt-client-with-rails-backend-integration-tip-2.markdown
@@ -18,7 +18,7 @@ Then, unlike echo2  you can compile your Gwt code to Javascript and Html and dep
 
 1) Create a Gwt JSNI class to invoke your rails service.
 
-Update 12/17/06: Since GWT 1.2.2, you can achievethis without writing your own JSNI class, by using the GWT [RequestBuilder](http://code.google.com/webtoolkit/documentation/com.google.gwt.http.client.RequestBuilder.html) class which provides a method to set your own http header.[Java Script Native Interface ](http://code.google.com/webtoolkit/documentation/com.google.gwt.doc.DeveloperGuide.JavaScriptNativeInterface.html) is Google Web Toolkit equivalent of JNI but for Javascript. Java objects (which are BTW translated to Javascript code by GWT compiler) can interact with Javascript objects (and reversly).Rails **respond_to** method available in each controller can be used to respond to yourclient and deliver a different response for each mime type asked.Rails uses **Accept HTTP header** to differentiate the asked media type response.So the class [Java source file](http://www.dewavrin.info/code/HTTPJsonRequest.java) have static GET and POST methods which perform HTTP requests and especially set the accept HTTP header to 'text/json' . 
+Update 12/17/06: Since GWT 1.2.2, you can achieve this without writing your own JSNI class, by using the GWT [RequestBuilder](http://code.google.com/webtoolkit/documentation/com.google.gwt.http.client.RequestBuilder.html) class which provides a method to set your own http header.[Java Script Native Interface ](http://code.google.com/webtoolkit/documentation/com.google.gwt.doc.DeveloperGuide.JavaScriptNativeInterface.html) is Google Web Toolkit equivalent of JNI but for Javascript. Java objects (which are BTW translated to Javascript code by GWT compiler) can interact with Javascript objects (and reversly).Rails **respond_to** method available in each controller can be used to respond to yourclient and deliver a different response for each mime type asked.Rails uses **Accept HTTP header** to differentiate the asked media type response.So the class {% include_code HTTPJsonRequest.java %} has static GET and POST methods which perform HTTP requests and especially set the accept HTTP header to 'text/json' . 
 (I grabbed this code from the GWT mailing list and modified it a little bit).Then declare it in your GWT module.
 
 {% codeblock lang:xml %}
